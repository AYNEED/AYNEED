scalar DateTime

schema {
  mutation: Mutation
  query: Query
  subscription: Subscription
}

type Mutation {
  forgotPassword(email: String!): Boolean!

  forgotPasswordChange(
    password: String!
    recoveryCode: String!
    client: USER_CLIENT!
  ): User!

  signInEmail(email: String!, password: String!, client: USER_CLIENT!): User!

  signUpEmail(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    locale: USER_LOCALE!
    isAgree: Boolean!
    client: USER_CLIENT!
  ): User!

  signOut: Boolean!

  likeAdd(
    targetId: ID!
    targetModel: LIKE_TARGET_MODEL!
    status: LIKE_STATUS!
  ): Like!

  likeRemove(id: ID!): Boolean!

  messageAdd(targetId: ID!, text: String!): Message!

  projectAdd(title: String!, problem: String!, solution: String!): Project!

  projectRemove(id: ID!): Boolean!

  subscriptionToUserAdd(targetId: ID!): SubscriptionUser!

  subscriptionToUserRemove(id: ID!): Boolean!
}

type Query {
  project(id: ID!): Project!
  projects(cursor: ID): ProjectFeed!

  user(id: ID!): User!
  users(cursor: ID): UserFeed!

  search(query: String!, targetModel: SEARCH_TARGET_MODEL!): UserFeed!

  messages(cursor: ID!): MessageFeed!
}

type Subscription {
  projectAdded: Project!
  projectUpdated: Project!

  userAdded: User!
  userUpdated: User!
}

# ########################### enums ###########################

enum LIKE_STATUS {
  like
  dislike
}

enum LIKE_TARGET_MODEL {
  user
  comment
  project
}

enum SEARCH_TARGET_MODEL {
  candidates
  users
  ideas
  concepts
  mvps
}

enum SUBSCRIPTION_STATUS {
  waiting
  accepted
  rejected
}

enum USER_LOCALE {
  rus
}

enum USER_LANGUAGE_LEVEL {
  beginner
  elementary
  intermediate
  upper_intermediate
  advanced
  proficiency
}

enum USER_CLIENT {
  mobile
  desktop
}

enum USER_ROLE {
  user
  support
}

# ########################### feeds ###########################

type MessageFeed {
  items: [Message!]!
  hasMore: Boolean!
}

type ProjectFeed {
  items: [Project!]!
  hasMore: Boolean!
}

type UserFeed {
  items: [User!]!
  hasMore: Boolean!
}

# ########################## models ###########################

type Message {
  id: ID!
  info: MessageInfoData!
  users: MessageUsersData!
  visible: MessageVisibleData!
  createdAt: DateTime!
  editAt: DateTime
  deleteAt: DateTime
}

type Project {
  id: ID!
  senderId: ID!
  title: String!
  problem: String!
  solution: String!
  createdAt: DateTime!
}

type User {
  id: ID!
  role: USER_ROLE!
  network: UserNetwotkData!
  about: UserAboutData!
  personal: UserPersonalData!
  regional: UserRegionalData!
  contacts: UserContactsData!
  statistics: UserStatisticsData!
  createdAt: DateTime!
  projects: [Project!]!
  subscriptions: [SubscriptionUser!]!
  subscribers: [SubscriberUser!]!
  friends: [FriendUser!]!
}

# #################### additional models ######################

type FriendUser {
  id: ID!
  senderId: ID!
  targetId: ID!
  createdAt: DateTime!
}

type Like {
  id: ID!
  senderId: ID!
  targetId: ID!
  targetModel: LIKE_TARGET_MODEL!
  status: LIKE_STATUS!
  createdAt: DateTime!
}

type SubscriberUser {
  id: ID!
  senderId: ID!
  targetId: ID!
  status: SUBSCRIPTION_STATUS!
  createdAt: DateTime!
}

type SubscriptionUser {
  id: ID!
  senderId: ID!
  targetId: ID!
  status: SUBSCRIPTION_STATUS!
  createdAt: DateTime!
}

# ######################## models data ########################

type MessageInfoData {
  text: String!
  isRead: Boolean!
}

type MessageUsersData {
  senderId: ID!
  targetId: ID!
}

type MessageVisibleData {
  isVisibleSender: Boolean!
  isVisibleAll: Boolean!
}

type UserAboutData {
  bio: String
  skills: [UserSkillRecord!]!
  career: [UserCareerRecord!]!
  education: [UserEducationRecord!]!
}

type UserContactsData {
  email: UserContactRecord!
  phone: UserContactRecord
  vkontakte: UserContactRecord
  facebook: UserContactRecord
  instagram: UserContactRecord
  telegram: UserContactRecord
  linkedin: UserContactRecord
}

type UserNetwotkData {
  isOnline: Boolean!
  client: USER_CLIENT!
}

type UserPersonalData {
  firstName: String!
  lastName: String!
  isAgree: Boolean!
  bornAt: DateTime
  photo: [String!]!
}

type UserRegionalData {
  city: String
  state: String
  country: String
  locale: USER_LOCALE!
  languages: [UserLanguageRecord!]!
}

type UserStatisticsData {
  completeness: Int!
}

# ###################### models records #######################

type UserCareerRecord {
  title: String!
  description: String!
}

type UserContactRecord {
  value: String!
  isVisible: Boolean!
  isVerified: Boolean!
}

type UserEducationRecord {
  title: String!
  description: String!
}

type UserLanguageRecord {
  code: String!
  level: USER_LANGUAGE_LEVEL!
}

type UserSkillRecord {
  title: String!
  primary: Boolean!
}
