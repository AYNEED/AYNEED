scalar DateTime

schema {
  mutation: Mutation
  query: Query
  subscription: Subscription
}

type Mutation {
  forgotPassword(email: String!): Boolean!

  forgotPasswordChange(
    password: String!
    recoveryCode: String!
    client: CLIENT!
  ): User!

  signInEmail(email: String!, password: String!, client: CLIENT!): User!

  signUpEmail(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
    locale: LOCALE!
    isAgree: Boolean!
    client: CLIENT!
  ): User!

  addBeginning(
    authorId: ID!
    title: String!
    problem: String!
    solution: String!
  ): Beginning!

  addMessage(authorId: ID!, recipientId: ID!, text: String!): Message!
}

type Query {
  beginning(id: ID!): Beginning!
  beginnings(cursor: ID): BeginningFeed!

  user(id: ID!): User!
  users(cursor: ID): UserFeed!

  search(query: String!, mode: SEARCH_MODE!): UserFeed!

  messages(cursor: ID!): MessageFeed!
}

type Subscription {
  beginningAdded: Beginning!
  beginningUpdated: Beginning!

  userAdded: User!
  userUpdated: User!
}

enum LOCALE {
  rus
}

enum STATUS_STATEMENT {
  waiting
  accepted
  rejected
}

enum LANGUAGE_LEVEL {
  beginner
  elementary
  intermediate
  upper_intermediate
  advanced
  proficiency
}

enum CLIENT {
  mobile
  desktop
}

enum SEARCH_MODE {
  candidates
  users
  ideas
  concepts
  mvps
}

enum ROLE {
  user
}

type BeginningFeed {
  items: [Beginning!]!
  hasMore: Boolean!
}

type UserFeed {
  items: [User!]!
  hasMore: Boolean!
}

type MessageFeed {
  items: [Message!]!
  hasMore: Boolean!
}

type Beginning {
  id: ID!
  authorId: ID!
  title: String!
  problem: String!
  solution: String!
  createdAt: DateTime!
}

type SubscriptionUser {
  id: ID!
  senderId: ID!
  recipientId: ID!
  status: STATUS_STATEMENT!
  createdAt: DateTime!
}

type User {
  id: ID!
  role: ROLE!
  network: UserNetwotkData!
  about: UserAboutData!
  personal: UserPersonalData!
  regional: UserRegionalData!
  contacts: UserContactsData!
  statistics: UserStatisticsData!
  createdAt: DateTime!
  beginnings: [Beginning!]!
  subscriptions: [SubscriptionUser!]!
}

type Message {
  info: MessageInfoData!
  users: MessageUsersData!
  visible: MessageVisibleData!
  createdAt: DateTime!
  editAt: DateTime
  deleteAt: DateTime
}

type UserNetwotkData {
  isOnline: Boolean!
  client: CLIENT!
}

type UserAboutData {
  bio: String
  skills: [UserSkillRecord!]!
  career: [UserCareerRecord!]!
  education: [UserEducationRecord!]!
}

type UserPersonalData {
  firstName: String!
  lastName: String!
  isAgree: Boolean!
  bornAt: DateTime
  photo: [String!]!
}

type UserRegionalData {
  city: String
  state: String
  country: String
  locale: LOCALE!
  languages: [UserLanguageRecord!]!
}

type UserContactsData {
  email: UserContactRecord!
  phone: UserContactRecord
  vkontakte: UserContactRecord
  facebook: UserContactRecord
  instagram: UserContactRecord
  telegram: UserContactRecord
  linkedin: UserContactRecord
}

type UserStatisticsData {
  completeness: Int!
}

type UserSkillRecord {
  title: String!
  primary: Boolean!
}

type UserCareerRecord {
  title: String!
  description: String!
}

type UserEducationRecord {
  title: String!
  description: String!
}

type UserLanguageRecord {
  code: String!
  level: LANGUAGE_LEVEL!
}

type UserContactRecord {
  value: String!
  isVisible: Boolean!
  isVerified: Boolean!
}

type MessageInfoData {
  text: String!
  isRead: Boolean!
}

type MessageUsersData {
  authorId: ID!
  recipientId: ID!
}

type MessageVisibleData {
  isVisibleAuthor: Boolean!
  isVisibleAll: Boolean!
}
